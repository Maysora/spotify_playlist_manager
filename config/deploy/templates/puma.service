[Unit]
Description=Puma HTTP Forking Server for Spotify Manager
After=network.target

[Service]
# Background process configuration (use with --daemon in ExecStart)
Type=forking

# Preferably configure a non-privileged user
User=deploy

# The path to the puma application root
# Also replace the "<WD>" place holders below with this path.
WorkingDirectory=/var/www/spotify_manager/current

# The command to start Puma
# (replace "<WD>" below)
ExecStart=/home/deploy/.rbenv/bin/rbenv exec bundle exec puma -C /var/www/spotify_manager/shared/puma.rb --daemon RBENV_ROOT=/home/deploy/.rbenv RBENV_VERSION=2.4.4

# The command to stop Puma
# (replace "<WD>" below)
ExecStop=/home/deploy/.rbenv/bin/rbenv exec bundle exec pumactl -S /var/www/spotify_manager/shared/tmp/pids/puma.state -F /var/www/spotify_manager/shared/puma.rb stop RBENV_ROOT=/home/deploy/.rbenv RBENV_VERSION=2.4.4

# Path to PID file so that systemd knows which is the master process
PIDFile=/var/www/spotify_manager/shared/tmp/pids/puma.pid

# Should systemd restart puma?
# Use "no" (the default) to ensure no interference when using
# stop/start/restart via `pumactl`.  The "on-failure" setting might
# work better for this purpose, but you must test it.
# Use "always" if only `systemctl` is used for start/stop/restart, and
# reconsider if you actually need the forking config.
Restart=no

# `puma_ctl restart` wouldn't work without this. It's because `pumactl`
# changes PID on restart and systemd stops the service afterwards
# because of the PID change. This option prevents stopping after PID
# change.
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target